"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/services/cardanoService.ts":
/*!****************************************!*\
  !*** ./src/services/cardanoService.ts ***!
  \****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cardanoService: () => (/* binding */ cardanoService)\n/* harmony export */ });\n/* harmony import */ var _config_blockfrost__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/blockfrost */ \"(app-pages-browser)/./src/config/blockfrost.ts\");\n\nconst API_URL = 'https://cardano-mainnet.blockfrost.io/api/v0';\nclass CardanoService {\n    async fetchApi(endpoint) {\n        const response = await fetch(\"\".concat(API_URL).concat(endpoint), {\n            headers: this.headers\n        });\n        if (!response.ok) {\n            throw new Error(\"API call failed: \".concat(response.statusText));\n        }\n        return response.json();\n    }\n    async sleep(ms) {\n        return new Promise((resolve)=>setTimeout(resolve, ms));\n    }\n    async processBatch(poolIds, startIdx) {\n        const batchPoolIds = poolIds.slice(startIdx, startIdx + this.batchSize);\n        const poolPromises = batchPoolIds.map((poolId)=>this.fetchApi(\"/pools/\".concat(poolId)));\n        const pools = await Promise.all(poolPromises);\n        // Get metadata for each pool in the batch\n        const poolsWithMetadataPromises = pools.map(async (pool)=>{\n            try {\n                const metadata = await this.fetchApi(\"/pools/\".concat(pool.pool_id, \"/metadata\"));\n                return {\n                    ...pool,\n                    active: true,\n                    metadata\n                };\n            } catch (e) {\n                return {\n                    ...pool,\n                    active: true\n                };\n            }\n        });\n        return Promise.all(poolsWithMetadataPromises);\n    }\n    async getAllStakePools() {\n        try {\n            // Get all stake pool IDs\n            const poolIds = await this.fetchApi('/pools');\n            const allPools = [];\n            // Process pools in batches\n            for(let i = 0; i < poolIds.length; i += this.batchSize){\n                const batchPools = await this.processBatch(poolIds, i);\n                allPools.push(...batchPools);\n                // Update progress in console\n                console.log(\"Fetched \".concat(allPools.length, \" of \").concat(poolIds.length, \" pools\"));\n                // Wait before processing next batch to respect rate limits\n                if (i + this.batchSize < poolIds.length) {\n                    await this.sleep(this.delayBetweenBatches);\n                }\n            }\n            return allPools;\n        } catch (error) {\n            console.error('Error fetching stake pools:', error);\n            throw error;\n        }\n    }\n    async getCurrentEpoch() {\n        try {\n            return await this.fetchApi('/epochs/latest');\n        } catch (error) {\n            console.error('Error fetching current epoch:', error);\n            throw error;\n        }\n    }\n    async getPoolDelegatorsCount(poolId) {\n        try {\n            const pool = await this.fetchApi(\"/pools/\".concat(poolId));\n            return pool.live_delegators;\n        } catch (error) {\n            console.error(\"Error fetching delegators count for pool \".concat(poolId, \":\"), error);\n            throw error;\n        }\n    }\n    constructor(){\n        this.batchSize = 50 // Blockfrost has a rate limit, so we process in batches\n        ;\n        this.delayBetweenBatches = 1000 // 1 second delay between batches\n        ;\n        this.headers = {\n            'project_id': _config_blockfrost__WEBPACK_IMPORTED_MODULE_0__.BLOCKFROST_CONFIG.projectId,\n            'Content-Type': 'application/json'\n        };\n    }\n}\nconst cardanoService = new CardanoService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/cardanoService.ts\n"));

/***/ })

});